Task 0a output:
Before it forks !
This is the parent process
Parent Process: 0
Parent Process: 1
Parent Process: 2
Parent Process: 3
Parent Process: 4
Parent Process: 5
Parent Process: 6
Parent Process: 7
Parent Process: 8
Parent Process: 9
Parent Process: 10
Parent Process: 11
Parent Process: 12
Parent Process: 13
Parent Process: 14
Parent Process: 15
Parent Process: 16
Parent Process: 17
Parent Process: 18
Parent Process: 19
Before it forks !
This is a child process 
Child Process: 0
Child Process: 1
Child Process: 2
Child Process: 3
Child Process: 4
Child Process: 5
Child Process: 6
Child Process: 7
Child Process: 8
Child Process: 9
Child Process: 10
Child Process: 11
Child Process: 12
Child Process: 13
Child Process: 14
Child Process: 15
Child Process: 16
Child Process: 17
Child Process: 18
Child Process: 19

Task 0b output:
P: Statement 1 
C: Statement 3 
P: Statement 1 
P: Statement 2 
P: Statement 4 

Task 1a output:
Sum = 50000000

Task 1b output:
Sum = 50000000

Task 2a output:
Sum = 50000000

Task 2b output:
Sum = 0

Task 2c output:
Sum = 0

Deliverable 1a output:
Statement 1 
Statement 2 
Statement 3 
Statement 4 

Deliverable 1b output:
Statement 1 
Statement 2 
Statement 3 
Statement 4 

Deliverable 1 discussion:
In the program d1afork.c, the child process is assigned a value of 1.
The fork() command makes it so that the parent and child processes execute concurrently.
This means that since parent is assigned statement 2 and the child is assigned process 1,
the code executes the statements in the order of 2, 1, 3, and 4.
This is because the parent has precedence over the child (even though they technically run concurrently)
and the parent executes its statement before the child.
In the d1bvfork.c program, the child process executes first because the vfork() command lets the child execute
first, and then the parent. This makes the output 1, 2, 3, and 4.

Deliverable 2 output:
msg: Consumer thread
msg: Producer thread
produced 30 
P>>in = 1 and out=0
Consumed 0
C>>in = 1 and out=1
produced 0 
P>>in = 2 and out=1
produced 15 
P>>in = 3 and out=1
produced 0 
P>>in = 4 and out=1
Consumed 0
C>>in = 4 and out=2
produced 55 
P>>in = 0 and out=2
produced 80 
P>>in = 1 and out=2
Consumed 0
C>>in = 1 and out=3
produced 130 
P>>in = 2 and out=3
